#version 410

layout (location = 0) in  vec3 pos;
layout (location = 1) in  vec3 nor;
layout (location = 2) in  vec4 color;
layout (location = 0) out vec4 outColor;

uniform mat4   modelView;
uniform vec3   viewPos;
uniform vec4   materialAmbient;
uniform vec4   materialSpecular;
uniform float  materialShiness;
uniform vec3   lightDirection;
uniform vec4   lightAmbient;
uniform vec4   lightDiffuse;
uniform vec4   lightSpecular;

vec4 Lighting(vec3 worldPos, vec3 norm)
{
    vec3 lightdir = -lightDirection; //light direction: toward viewer
    float dot_ = dot(lightdir, norm);
    if (dot_ < 0.0) {
	dot_ = -dot_;
    norm = -norm;
    }
    float diff    = dot_; //diffuse component
    vec4 ambient  = lightAmbient * materialAmbient;
    vec4 diffuse  = lightDiffuse * color;
    vec3 reflect_ = normalize(2.0*diff*norm - lightdir);
    vec3 viewdir  = normalize(viewPos - worldPos);
    vec4 specular = lightSpecular * materialSpecular * pow(max(0.0, dot(reflect_, viewdir)), materialShiness);
    return ambient + diffuse * diff + specular;
}

void main()
{
    vec4 color = vec4(0,0,0,0);
    vec4 worldNormal = modelView * vec4(nor, 0);
    vec3 norm = normalize(worldNormal.xyz);
    outColor = Lighting(pos, norm);
}